plugins {
    id 'org.springframework.boot' version "$springBootVersion"
    id 'io.spring.dependency-management' version "$springDependencyManagentVersion"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = javaVersion

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
    generator {
        extendsFrom runtime
    }

    // Exclude Tomcat as I want to use Undertow
    compile.exclude module: "spring-boot-starter-tomcat"
}

dependencies {
    // Spring boot
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-websocket'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-undertow'
    implementation group: 'org.flywaydb', name: 'flyway-core'

    // Devtools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Demo Protobuf
    implementation project(":protobuf:protobufgen")

    // protobuf & grpc dependencies
    compile group: 'com.google.protobuf', name: 'protobuf-java', version: protobufVersion
    compile group: 'com.google.protobuf', name: 'protobuf-java-util', version: protobufVersion
    implementation group: 'io.grpc', name: 'grpc-stub', version: grpcVersion

    // grpc server
    compile group: 'net.devh', name: 'grpc-server-spring-boot-starter', version: grpcSpringBootVersion

    implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: openApiVersion

    implementation group: 'org.springframework.retry', name: 'spring-retry', version: springRetryVersion
    implementation group: 'org.springframework', name: 'spring-aspects', version: springAopVersion

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Postgres
    runtimeOnly 'org.postgresql:postgresql'

    // Socket Server
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    testImplementation 'org.springframework.amqp:spring-rabbit-test'

    // Definition Generator
    runtime group: 'com.example.demo', name: 'definition-generator', version: generatorVersion

    implementation(group: 'com.example', name: 'messageq-grpc-api-schema', version: messageqApiVersion)

    // Test
    testCompile group: 'org.testcontainers', name: 'junit-jupiter', version: testContainersVersion
    testImplementation group: 'org.springframework.cloud', name: 'spring-cloud-starter', version: springBootCloudVersion
    testCompile group: 'com.playtika.testcontainers', name: 'embedded-postgresql', version: embeddedPostgresContainerVersion
    testImplementation group: 'io.grpc', name: 'grpc-testing', version: grpcTestingVersion
    testImplementation group: 'net.devh', name: 'grpc-client-spring-boot-starter', version: grpcSpringBootVersion
    testCompile group: 'org.awaitility', name: 'awaitility', version: awaitilityVersion

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.security:spring-security-test'
}

googleJavaFormat {
    options style: 'AOSP'
}

def outputPackage = 'com.example.demo.domain'
def enumExporterArgs = [
        '--inputFileDirectory', "${project.projectDir}/src/main/resources/json",
        '--inputFile', 'missions.json',
        '--outputClassName', 'MissionDefinitionEnum',
        '--outputDomain', "${outputPackage}.planet.mission.model",
        '--filterFunction', '$.definitions[*].id',
        '--updateDbEnum',
        '--dbEnumOutputFolder', "${project.projectDir}/src/main/resources/db/migration"
]
tasks.register("generateEnumDefinitionConstants", JavaExec) {
    description 'Generates/Updates enum classes reading the definition files (json) '
    group 'generate constants'

    args = enumExporterArgs
    classpath = configurations.runtime
    main = 'gradle.DefinitionEnumGenerator'
}

task listJars {
    // https://discuss.gradle.org/t/what-is-dolast-for/27731
    // The doLast creates a task action that runs when the task executes. Without it, youâ€™re running the code at configuration time on every build.
    doLast {
        configurations.runtime.each { File file -> println file.name }
    }
}

test {
    useJUnitPlatform()
}
